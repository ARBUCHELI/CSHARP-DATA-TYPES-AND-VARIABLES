# WORKING WITH NUMBERS
----------------------

* Introduction to Working with Numbers
--------------------------------------
No matter what you want to make in C#, you’ll need numbers!

Art: what are the dimensions of your canvas?
Games: how fast can your player move?
Business: how much does your product cost?

In this lesson, we’ll look at a few of the most commonly used numerical data types in C#. By the end of this lesson, you will be able to manipulate numerical data and write programs that 
perform calculations using arithmetic operators and built-in methods.

Program.cs
----------
using System;

namespace BusinessSolution
{
  class Program
  {
    static void Main(string[] args)
    {
      // Calculating Net Income 
      double revenue = 853023.45;
      double expenses = 438374.11;
      double netIncome = revenue - expenses;

      Console.WriteLine(netIncome);

      // Calculating a Break-Even Point
      double fixedCosts = 912849.30;
      double salesPrice = 29.99;
      double variableCostPerUnit = 17.65;

      double breakEvenVolume = fixedCosts / (salesPrice - variableCostPerUnit);
      Console.WriteLine(breakEvenVolume);
    }
  }
}

==================================================================================================================================================================

* Numerical Data Types
----------------------
In C#, there are several ways of representing numerical data. Your usage of each will depend on your application. When choosing a data type, think about the following questions:

Do I need a whole number or do I need something that will represent a fraction, or a decimal? If I want to use a decimal, how precise do I need to be? Depending on your application, 
whether it’s a hobby project or building a B2B financial services software, you’ll need a different data type. Is performance a factor? Most times, choosing a data type that takes up less 
memory will result in faster applications.

Let’s look at two data types that we can use to represent different numerical values:

* Int
-----
An int is a whole integer value, like 4, 100, or 2349. They’re a good way to count units of things. For example, if we wanted to track the number of coin flips a user makes, we’d use an 
int. It doesn’t make sense to have 0.5 coin flips!

To define a variable with the type int, you would write it as follows:

int variableName = 7;
 
* Double and Decimal
--------------------
If we need to use a decimal value, we have a few options: float, double, and decimal. These values are useful for anything that requires more precision than a whole number, like measuring 
the precise location of an object in 3D space.

A double is usually the best choice of the three because it is more precise than a float, but faster to process than a decimal. However, make sure to use a decimal for financial 
applications, since it is the most precise.

To define a variable with the type double, you would write it as follows:

double variableName = 39.76876;
 
To define a variable with the type decimal, you would write it as follows:

decimal variableName = 489872.76m;
 
Don’t forget the m character after the number! This character tells C# that we’re defining a decimal and not a double.

Program.cs
----------
using System;

namespace Numbers
{
  class Program
  {
    static void Main(string[] args)
    {
      // Number of pizza shops
      int pizzaShops = 4332;

      // Number of employees
      int totalEmployees = 86928;

      // Revenue
      double revenue = 390819.28;

      // Log the values to the console:
      Console.WriteLine(pizzaShops);
      Console.WriteLine(totalEmployees);
      Console.WriteLine(revenue);
   	}
  }
}

==================================================================================================================================================================

* Arithmetic Operators
----------------------
So what can we do with numerical data? A first step is to write expressions using arithmetic operators.

Arithmetic operators include:

	. addition +

	. subtraction -

	. multiplication *

	. division /

We can use these symbols to perform operations on numbers and create new values.

int answer = 4 + 19;
Console.Write(answer);
 
// prints 23
 
When using operators, it’s important to pay attention to data types. If we use two integers, it will return an integer every time. However, if we combine an integer with a double, the 
answer will be a double. Let’s look at the following example:

Console.WriteLine(5 / 3);
Console.WriteLine(5 / 3.0);
 
// prints 1
// prints 1.66667
 
The first operation that we log uses two ints. While 3 doesn’t go into 5 evenly, we are still left with an int whole number. In the second operation, we use an int and a double, so the 
final result is a double.

C# follows the order of operations. If we do 1 + 2 * 3, should the answer be 9 or 7? C# follows a set of rules to determine which operations to perform first (the answer is 7). It’s good 
practice to use parentheses to explicitly tell C# how to calculate these expressions.

Notice in the following example, even if the addition symbol appears like it should come first, the multiplication operation will happen first.

int answer = 8 + (9 * 3);
Console.Write(answer);
 
// prints 35

Program.cs
----------
using System;

namespace PlanetCalculations
{
  class Program
  {
    static void Main(string[] args)
    {  
      // Your Age
      int userAge = 45;

      // Length of years on Jupiter (in Earth years)
      double jupiterYears = 11.86;

      // Age on Jupiter
      double jupiterAge = userAge / jupiterYears;

      // Time to Jupiter
      double journeyToJupiter = 6.142466;

      // New Age on Earth
      double newEarthAge = userAge + journeyToJupiter;

      // New Age on Jupiter
      double newJupiterAge = newEarthAge/jupiterYears;

      // Log calculations to console
      Console.WriteLine(newEarthAge);
      Console.WriteLine(newJupiterAge);


    }
  }
}

==================================================================================================================================================================

* Operator Shortcuts
--------------------
Often we need to update a variable in our program. We can do so by modifying that variable using an arithmetic expression, then re-saving it to the same variable name:

int apple = 0;
apple = apple + 1;
Console.Write(apple); // prints 1
 
Programmers are always looking for shortcuts. For instance, we can condense the same program above using the shorthand ++. The combined addition signs represent the idea of incrementing 
by one. We can do the same with the subtraction symbol --.

// a shorter way to do the same thing 
int apple = 0;
apple++;
Console.Write(apple); // prints 1
 
If we want the amount to increment by another value, say 3, we would do the following:

int apple = 0;
apple += 3; // is the same as apple = apple + 3
Console.Write(apple); // prints 3
 
Again, if we want to decrement, you would do -=3.

Ultimately, programmers disagree on this, so everyone does it differently! On Codecademy, we prefer clarity over conciseness, so we’ll use the long form (apple = apple + 3) except for 
incrementing by one (apple++).

Program.cs
----------
using System;

namespace MakingProgress
{
  class Program
  {
    static void Main(string[] args)
    {
      // declare steps variable
      int steps = 0;

      // Two steps forward 
      steps += 2;

      // One step back 
      steps -= 1;

      // Print result to the console
      Console.WriteLine(steps);
    }
  }
}

==================================================================================================================================================================

* Modulo
--------
One arithmetic operator that we haven’t covered yet and may be less familiar is a modulo. A modulo returns a remainder, what is left over when we divide a number by another number.

4 % 3 = 1
4 % 2 = 0
 
The modulo is the same as the percentage symbol, but it’s important to remember its different meaning in this context.

Modulos are useful because they let us know if a number “fits” into a larger number, or if there will be a remainder. For example, how many eggs will be left over if I try and fit 56 eggs 
into crates of a dozen eggs?

int eggs = 56;
int crateAmount = 12;
 
int eggsLeftOver = eggs % crateAmount; 
Console.Write(eggsLeftOver); // prints 8
 
It can also be used to check if a number is odd or even. If a number is even, taking its modulo with 2 it will return a 0 and if it is odd it will return a 1:

int myNum = 85939824;
Console.Write(myNum % 2); // prints 0, so number is even

Program.cs
----------
using System;

namespace ClassTeams
{
  class Program
  {
    static void Main(string[] args)
    {
      // Number of students
      int students = 18;

      // Number of students in a group
      int groupSize = 3;


      // Does groupSize go evenly into students?
      Console.WriteLine(students % groupSize);

    }
  }
}

==================================================================================================================================================================

* Built-In Methods
------------------
So how do we do more advanced mathematical operations? For example, how would we perform a square root on a number if the program doesn’t recognize a square root symbol?

There are several built-in methods that we can use to manipulate numerical data and perform more complex mathematical calculations. Here are a few:

	. Math.Abs()—will find the absolute value of a number. Example: Math.Abs(-5) returns 5.

	. Math.Sqrt()—will find the square root of a number. Example: Math.Sqrt(16) returns 4.

	. Math.Floor()—will round the given double or decimal down to the nearest whole number. Example: Math.Floor(8.65) returns 8.

	. Math.Min()—returns the smaller of two numbers. Example: Math.Min(39, 12) returns 12.

Program.cs
----------
using System;

namespace LowestNumber
{
  class Program
  {
    static void Main(string[] args)
    {
      // Starting variables 
      int numberOne = 12932;
      int numberTwo = -2828472;

      // Use built-in methods and save to variable 
      double numberOneSqrt = Math.Floor(Math.Sqrt(numberOne));

      // Use built-in methods and save to variable 
      double numberTwoSqrt = Math.Floor(Math.Sqrt(Math.Abs(numberTwo)));

      // Print the lowest number
      Console.WriteLine(Math.Min(numberOneSqrt, numberTwoSqrt));

    }
  }
}

==================================================================================================================================================================




















































