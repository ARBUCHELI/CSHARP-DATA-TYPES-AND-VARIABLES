# WORKING WITH TEXT
-------------------

* Introduction to Working with Text
-----------------------------------
Working with text is a fundamental part of writing programs. Whether it’s to provide instructions to a user, gathering data like a name or address, or writing a new form of poetry, text 
enables us to bring human language into computational form.

In this lesson, we’ll look at the two commonly used text data types in C#: char and string. By the end of this lesson, you will be able to manipulate textual data and write programs that 
take in user inputs and output customizable messages using variables, operators, and built-in methods.

Program.cs
----------
using System;

namespace MadTeaParty
{
  class Program
  {
    static void Main(string[] args)
    {
      string drink = "wine";
      string madTeaParty = $"\"Have some {drink},\" the March Hare said in an encouraging tone. \nAlice looked all round the table, but there was nothing on it but tea.\n\"I don't see any {drink},\" she remarked.\n\"There isn't any,\" said the March Hare.";

      int storyLength = madTeaParty.Length;
      string toFind = "March Hare";

      string findLowerCase = toFind.ToLower(); 
      int findMarchHare = madTeaParty.IndexOf(toFind);

      Console.WriteLine(madTeaParty.Substring(findMarchHare));
      Console.WriteLine($"This scene is {storyLength} long.\n");
      Console.WriteLine($"The term we're looking for is {toFind} and is located at index {findMarchHare}.");

    }
  }
}

==================================================================================================================================================================

* Building Strings
------------------
A string is a group of characters surrounded by quotation marks, like "https://codecademy.com" or "To be or not to be." A string is just a collection of a smaller data type, char, which 
is a single character like “a” or “?”.

To define a variable as a string, you write the data type, then the variable name. Then set it equal to the value, which is inside of quotation marks :

	string variableName = "puppy";
 
The variable is named variableName, it’s of type string, and its value is "puppy".

* Escape Character Sequences
----------------------------
What happens when you need to include quotes in a string? You can use an escape sequence. An escape sequence places a backslash (\) before the inner quotation marks, so the program 
doesn’t read them accidentally as the end of sequence.

	string withoutSlash = "Ifemelu said, "Hello!"";
 
	string withSlash = "Ifemelu said, \"Hello!\"";
 
We can use escape character sequences to create a newline. That means that when we print the string to the console, it will print that line below the rest. If printed on its own, it will 
create an empty line. To create a newline, use the character combination \n.

	string newLine = "Ifemelu walked \n to the park.";
 
For more on escape sequences, check out Microsoft’s Documentation.

Program.cs
----------
using System;

namespace PrideAndPrejudice
{
  class Program
  {
    static void Main(string[] args)
    {
      // First string variable
      string firstSentence = "It is a truth universally acknowledged, that a single man in possession of a good fortune, must be in want of a wife.";
      // Second string variable
      string firstSpeech = "\"My dear Mr. Bennet,\" said his lady to him one day, \"have you heard that Netherfield Park is let at last?\"";

      // Print variable and newline
      Console.WriteLine(firstSentence);
      Console.WriteLine("\n");
      Console.WriteLine(firstSpeech);
    }
  }
}

==================================================================================================================================================================

* String Concatenation
----------------------
Often, we want to combine strings together, or combine strings with a value that we’ve saved to a variable.

A common way to do is by using string concatenation. String concatenation is when we combine strings using the addition symbol (+), literally adding one string to another.

string yourFaveMusician = "David Bowie";
string myFaveMusician = "Solange";
 
Console.WriteLine("Your favorite musician is " + yourFaveMusician + " and mine is " + myFaveMusician + ".");
 
We write the first part of our string, end it with a double quote ("), include an addition symbol and then put our variable. However, there are a couple of things to pay attention to:

	. If we want to concatenate a string with something that is another data type, C# will implicitly convert that value to a string.

	. Make sure that you include spaces and proper punctuation so that when it prints out, your variable strings aren’t squished between the rest of the statement. Notice how we have 
	to create a one character string at the end to include a period.

Program.cs
----------
using System;

namespace StoryTime
{
  class Program
  {
    static void Main(string[] args)
    {
      // Declare the variables
      string beginning = "I started to play the piano when I was 9 years old.";

      string middle = "I was good in math and nusic, and I for that reason, I decided to go the university to study music, but ...";

      string end = "finally, my love for math, and science was bigger, and I decided to become an Engineer in Electronics.";

      // Concatenate the string and the variables
      string story = beginning + " " + middle + " " + end + "!!!" + "\n";

      // Print the story to the console 
      Console.WriteLine(story);
    }
  }
}

==================================================================================================================================================================

* String Interpolation
----------------------
While string concatenation is easy to read, it can get annoying to write. Another option is string interpolation. String interpolation was introduced in C# 6 and it enables us to insert 
our variable values and expressions in the middle of a string, without having to worry about spaces and punctuation.

string yourFaveMusician = "David Bowie";
string myFaveMusician = "Solange";
 
Console.WriteLine($"Your favorite musician is {yourFaveMusician} and mine is {myFaveMusician}.");
 
Notice how we just have one string, which we append with the dollar sign symbol $. Make sure there isn’t a space in between the $ and the starting quotation mark ". Whenever we need to 
insert a variable, we surround it with braces {}.For more on string interpolation, check out Microsoft’s documentation.

In older documentation, you may come across a slightly similar syntax. This style is known as string formatting or composite formatting. Since the introduction of string interpolation, it 
is rarely used. But in case you come across it, check out Microsoft’s documentation.

Program.cs
----------
using System;

namespace StoryTime
{
  class Program
  {
    static void Main(string[] args)
    {
      // Declare the variables
      string beginning = "Once upon a time,";
      string middle = "The kid climbed a tree";
      string end = "Everyone lived happily ever after.";

      // Interpolate the string and the variables
      string story = $"{beginning} {middle} {end}";

      // Print the story to the console 
      Console.WriteLine(story);
    }
  }
}

==================================================================================================================================================================






























































