# PROJECT
---------

* Money Maker
-------------
You have three types of coins:

	. A bronze coin is worth 1 cent

	. A silver coin is worth 5 cents

	. A gold coin is worth 10 cents

What is the minimum number of coins that equals 98 cents?

It’s a hard question to answer in your head, but it’s a fun problem to solve with programming. In this project you’ll use C# to build a Money Maker: a program in which a user enters an 
amount and gets the minimum number of coins that equal that value.

For example, 16 cents could be:

	. 16 bronze coins,

	. 3 silver coins and 1 bronze coin, or

	. 1 gold coin, 1 silver coin, 1 bronze coin

We’d like the last option because it uses the fewest coins.

This project will get you comfortable with division (/), rounding down (Math.Floor()), and modulo (%): You can find how many coins “fit” into an amount by dividing the amount by the coin 
value, rounding down, and finding the remainder. Let’s walk through an example:

The user enters 15 cents. A gold coin is 10 cents, so 1.5 gold coins fit into the total.

	goldCoinsIn15Cents = 15 / 10; // equals 1.5
 
But we can’t divide coins in half, so instead, we round down to the nearest whole number:

	actualGoldCoins = Math.Floor( 15 / 10 ); // equals 1
 
You can find the remainder using modulo:

	double remainder = 15 % 10; // equals 5
 
Using the remainder, repeat the process with the smaller coins.
Tasks
12/12 Complete
Mark the tasks as complete by checking them off

* Capture Input
---------------
1.
Run the code once to understand the starting code. Use dotnet run in the terminal.


Hint
You should see some text printed to the console.

2.
Use Console.WriteLine() and Console.ReadLine() to ask the user for the amount to convert and capture the value in a variable.


Hint
Here’s an example of asking a question and capturing user input:

	Console.WriteLine("Enter an amount to convert to coins:");
	string totalAsString = Console.ReadLine();
 
3.
Convert the captured value (a string) to a number.

You can convert a value using Convert.ToDouble().


Hint
The user’s input will be captured as a string data type from Console.ReadLine(). To correctly use arithmetic operators like /, we need to convert it to a number data type, like double.

For example:

	double myAgeAsDouble = Convert.ToDouble(myAgeAsString);
 
Here’s the method’s documentation if you’re curious!

4.
Before we get to calculating, let the user know what you are about to do. For example, if the user entered 16, the program should write to the console:

	16 cents is equal to...
 

Hint
Use Console.WriteLine() and string interpolation. Remember that string interpolation requires a dollar sign $ before the double quotes:

$"An example: {amount}"
 
5.
Run the code to check your work so far. At this point you should see something like:

	Welcome to Money Maker!
	Enter an amount to convert to coins:
 
Once you enter a number — say 16 — and press Enter you should see something like:

	16 cents is equal to...
 

Hint
Use dotnet run in the terminal.

Your output doesn’t have to look exactly the same, but it should mean the same thing.

* Convert To Coins
------------------
6.
To convert to coins, we need to know the value of each type of coin! Define two variables that hold those values.

	. A gold coin is worth 10 cents

	. A silver coin is worth 5 cents

Don’t worry about bronze coins for now.


Hint
Define two int variables with the values 10 and 5. You can name them goldValue and silverValue.

7.
To find the maximum number of gold coins that “fit” into the amount (e.g. one gold coin fits into 11 cents):

	1. Divide the amount by the value of a gold coin

	2. Round down to the nearest integer

	3. Store the result in a double variable called goldCoins

Hint
Like the example in the project description, you’ll need to use the division operator (/) and Math.floor().

For example, 10 “fits” into 21 two times:

	double howMany10sIn21 = Math.Floor(21 / 10); 
	// howMany10sIn21 equals 2
 
8.
Use the modulo (%) operator to find the remaining amount and store it in a double variable.


Hint
For example, one gold coin fits into 11 cents and the remainder is 1:

	double leftOver = 11 % 10 // equals 1
 
9.
Find the maximum number of silver coins that “fit” into the remainder:

	1. Divide the remainder by the value of a silver coin

	2. Round down to the nearest integer

	3. Store the result in a double variable called silverCoins

Hint
You’ll need to use the division operator (/) and Math.floor().

If the remainder is stored in a variable remainder and the value of a silver coin is stored in silverValue, then the maximum number of silver coins that “fit” can be found with:

	double silverCoins = Math.Floor(remainder / silverValue);
 
10.
Use the modulo (%) operator to find the remaining amount and store it in the existing remainder variable.

	remainder = remainder % silverValue;
 

Hint
You don’t need to mark remainder as a double because it was already defined as a double in an earlier step!

11.
Print out all of the coins! If your input was 16, your output should look something like:

	16 cents is equal to...
	Gold coins: 1
	Silver coins: 1
	Bronze coins: 1
 
We didn’t need to do extra work to find the number of bronze coins because it’s just the remainder!


Hint
Use Console.WriteLine() and string interpolation to print out the values.

Use the remainder as the number of bronze coins (e.g. if the remainder is 4, then you need 4 bronze coins).

12.
Test your application to make sure it works! Some test cases are provided in the hint.

Here are two optional challenges:

	. The program doesn’t work if the user enters a decimal, like 16.2 cents. Using type conversion or a Math method, round down their input to the nearest whole cent.

	. Use another currency that has different coin amounts. For example, the US uses 1, 5, 10, and 25 cent coins called pennies, nickels, dimes, and quarters, respectively.

Hint
1 cent is 1 bronze coin.
16 cents is 1 gold, 1 silver, 1 bronze.
98 cents is 9 gold, 1 silver, 3 bronze.
5,000 cents is 500 gold coins!

Program.cs
----------
using System;

namespace MoneyMaker
{
  class MainClass
  {
    public static void Main(string[] args)
    {
      Console.WriteLine("Welcome to Money Maker!");
      Console.Write("Enter money to convert to coins: ");
      string money = Console.ReadLine();
      double numeric_money = Convert.ToDouble(money);
      Console.WriteLine($"{numeric_money} cents is equal to...\n");
      int goldValue = 10;
      int silverValue = 5;
      double goldCoins = Math.Floor(numeric_money /   goldValue);
      double remainder = numeric_money % goldValue;
      double silverCoins = Math.Floor(remainder /  silverValue);
      remainder = remainder % silverValue;
      Console.WriteLine($"Gold coins: {goldCoins}\n");
      Console.WriteLine($"Silver coins: {silverCoins}\n");
      Console.WriteLine($"Bronze coins: {remainder}\n");
    }
  }
}

==================================================================================================================================================================






































