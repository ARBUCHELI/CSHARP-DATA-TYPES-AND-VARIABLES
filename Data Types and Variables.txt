# DATA TYPES AND VARIABLES
--------------------------

* Introduction to Data Types and Variables in C#
------------------------------------------------
When we write programs, we’re telling the computer how to process pieces of information, like the numbers in a calculation, or printing text to the screen. So how does a computer 
distinguish between a number and a character? Why is it important to be able to tell the difference?

Languages like C# tell a computer about the type of data in its program using data types. Data types represent the different types of information that we can use in our programs and how 
they should be used.

Without data types, computers would try and perform processes that are impossible, like squaring a piece of text or capitalizing a number. That’s how we get bugs!

C# is strongly-typed, so it requires us to specify the data types that we’re using. It is also statically-typed, which means it will check that we used the correct types before the 
program even runs. Both language features are important because they help write scalable code with fewer bugs.

Using types will come up in several different places when learning C#. To start, we’ll examine how types impact variable declaration and the usage of different data types in a program.

In this lesson, we’ll look at:

	. Common C# data types

	. How to create variables that are statically typed

	. How to convert variables from one data type to another

===================================================================================================================================================================

* C# Data Types
---------------
Data types tell us a few things about a piece of data, like:

	. How it can be stored

	. What operations we can perform with it

	. Different methods it can be used with

Data types are present in all programming languages, but are particularly important in C#. That’s because C# is known as a strongly-typed language—it requires that the programmer specify 
the data type of every value and expression. While it means writing more code, using types has long term benefits like built-in documentation and increased readability.

As we can see to the diagram to the right, C# has several built-in data types. You don’t need to memorize all of them, but pay specific attention to these common ones that we’ll use 
throughout our lessons:

	. int - whole numbers, like: 1, -56, 948
	. double - decimal numbers, like: 239.43909, -660.01
	. char - single characters, like: “a”, “&”, “£”
	. string - string of characters, like: “dog”, “hello world”
	. bool - boolean values, like: true or false

Type			Description			Size (bytes)			.NET Type			Range
----			-----------			------------			---------			-----
int			Whole numbers			4				System.Int32			-2,147,483,648
															      to
															 2,147,483,647

long			Whole numbers			8				System.Int64			-9,223,372,036,854,775,808
		        (bigger range)										              to
															 9,223,372,036,854,775,807

float			Floating point numbers		4				System.Single			+- 3.4 x 10^38

double			Double precision		8				System.Double			+- 1.7 x 10^308
			(more accurate)
			floating point numbers

decimal 		Monetary values			16				System.Decimal			28 significant figures

char			Single character		2				System.Char			N/A

bool			Boolean				1				System.Boolean			True of False

DateTime		Moments in time			8				System.DateTime			0:0:00 on 01/01/0001
																to
															23:59:59 on 12/31/9999

string			Sequence of characters		2 per character			System.string			N/A


==================================================================================================================================================================

* Creating Variables with Types
-------------------------------
When we use data in our programs, it’s good practice to save them in a variable. A variable is basically like a box in our computer memory where we can store values used in our code.

In C#, data types and variables are closely intertwined. Remember how C# is strongly-typed? Every time we declare a variable, we have to specify what kind of data type that variable is 
going to hold.

There are two ways we can assign variables. We can do it on two lines:

	// Declare an integer
	int myAge;
	myAge = 32;
 
Or, we can be more concise and just do it on one:

	// Declare a string
	string countryName = "Netherlands";
 
In each case, we first write the data type, then the variable name, then use the equals sign = to assign the variable a value.

Once we’ve defined a variable, we can use them throughout our program. For example, here’s a short program that prints a few math equations to the console:

	int evenNumber = 22;
	int oddNumber = 45;
	Console.WriteLine(evenNumber + oddNumber); // Prints 67
	Console.WriteLine(oddNumber - evenNumber); // Prints 23
 
If we want to change the values, it’s only necessary to change it in one place instead of everywhere it is used.

Program.cs
----------
using System;

namespace Form
{
  class Program
  {
    static void Main(string[] args)
    {
      // Create Variables
      string name = "Shadow";
      string breed = "Golden Retriever";
      int age = 5;
      double weight = 65.22;
      bool spayed = true;
      // Print variables to the console
      Console.WriteLine(name);
      Console.WriteLine(breed);
      Console.WriteLine(age);
      Console.WriteLine(weight);
      Console.WriteLine(spayed);
      }
    }
  }

==================================================================================================================================================================

* Handling Errors
-----------------
When you program, you’ll come across a lot of errors. And that’s ok! And when you’re first starting to learn a strongly-typed language, errors can be pretty common.

So, what happens if you forget to specify a data type for your variable?:

	randomData = "asdf jskdf";
	Console.WriteLine(randomData);
 
C# will give an error because it doesn’t want you to have random data being used in your application. The error will look something like this:

	The name 'randomData' does not exist in the current context [CS0103:] 

If you use the wrong type definition, like an int when it’s supposed to be a double:

	int score = 45.39;
 
You might see an error like this:

	Cannot implicitly convert type 'double' to 'int'. An explicit conversion exists (are you missing a cast?)

We also want to watch out for how we name our variables. It’s good practice to use camelCase styling, and they should only contain underscores, letters, and digits.

	string iAmAVariable;
	string i'mnot; // this will cause errors
 
There are also a few words that you can’t use. These are known as reserved keywords. Reserved keywords are words that the language uses, so they already have specific definitions that 
shouldn’t be re-written. If we use one of them as a variable name, we risk overwriting it and causing significant errors in our program. For example, we can’t name a variable string 
because that word is reserved for defining data types.

Lastly, it’s important to double-check spelling and punctuation! Don’t forget to end each statement with a semicolon ;.

Luckily, many IDEs will point out these potential errors before we even run our code! But it’s still good to be prepared to handle these errors if you should see them, including when 
you’re coding on Codecademy.

Program.cs
----------
using System;

namespace BugSquasher
{
  class Program
  {
    static void Main(string[] args)
    {
      double number = 38498.3222;

      string dinosaur = "Barney";

      double lockEr = 293.000;

      bool isYes = true;

      string band = "The Low Anthem";

    }
  }
}

==================================================================================================================================================================























