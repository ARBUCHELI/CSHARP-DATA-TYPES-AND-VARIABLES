# DATA TYPES AND VARIABLES
--------------------------

* Introduction to Data Types and Variables in C#
------------------------------------------------
When we write programs, we’re telling the computer how to process pieces of information, like the numbers in a calculation, or printing text to the screen. So how does a computer 
distinguish between a number and a character? Why is it important to be able to tell the difference?

Languages like C# tell a computer about the type of data in its program using data types. Data types represent the different types of information that we can use in our programs and how 
they should be used.

Without data types, computers would try and perform processes that are impossible, like squaring a piece of text or capitalizing a number. That’s how we get bugs!

C# is strongly-typed, so it requires us to specify the data types that we’re using. It is also statically-typed, which means it will check that we used the correct types before the 
program even runs. Both language features are important because they help write scalable code with fewer bugs.

Using types will come up in several different places when learning C#. To start, we’ll examine how types impact variable declaration and the usage of different data types in a program.

In this lesson, we’ll look at:

	. Common C# data types

	. How to create variables that are statically typed

	. How to convert variables from one data type to another

===================================================================================================================================================================

* C# Data Types
---------------
Data types tell us a few things about a piece of data, like:

	. How it can be stored

	. What operations we can perform with it

	. Different methods it can be used with

Data types are present in all programming languages, but are particularly important in C#. That’s because C# is known as a strongly-typed language—it requires that the programmer specify 
the data type of every value and expression. While it means writing more code, using types has long term benefits like built-in documentation and increased readability.

As we can see to the diagram to the right, C# has several built-in data types. You don’t need to memorize all of them, but pay specific attention to these common ones that we’ll use 
throughout our lessons:

	. int - whole numbers, like: 1, -56, 948
	. double - decimal numbers, like: 239.43909, -660.01
	. char - single characters, like: “a”, “&”, “£”
	. string - string of characters, like: “dog”, “hello world”
	. bool - boolean values, like: true or false

Type			Description			Size (bytes)			.NET Type			Range
----			-----------			------------			---------			-----
int			Whole numbers			4				System.Int32			-2,147,483,648
															      to
															 2,147,483,647

long			Whole numbers			8				System.Int64			-9,223,372,036,854,775,808
		        (bigger range)										              to
															 9,223,372,036,854,775,807

float			Floating point numbers		4				System.Single			+- 3.4 x 10^38

double			Double precision		8				System.Double			+- 1.7 x 10^308
			(more accurate)
			floating point numbers

decimal 		Monetary values			16				System.Decimal			28 significant figures

char			Single character		2				System.Char			N/A

bool			Boolean				1				System.Boolean			True of False

DateTime		Moments in time			8				System.DateTime			0:0:00 on 01/01/0001
																to
															23:59:59 on 12/31/9999

string			Sequence of characters		2 per character			System.string			N/A


==================================================================================================================================================================























